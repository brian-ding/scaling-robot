{
  "repo": "brian-ding/glowing-train",
  "pr_Number": 3,
  "title": "cicd: [Noticket] Add new workflow for ai pr review",
  "description": "Description: Add new workflow for ai pr review\n\n![image](https://github.com/user-attachments/assets/0ec6f07f-786a-431b-88e6-c0eb54c3f415)",
  "diff": "diff --git a/.idea/scaling-robot.iml b/.idea/scaling-robot.iml\nindex ec63674..0070e87 100644\n--- a/.idea/scaling-robot.iml\n+++ b/.idea/scaling-robot.iml\n@@ -1,7 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <module version=\"4\">\n   <component name=\"PyDocumentationSettings\">\n-    <option name=\"format\" value=\"PLAIN\" />\n-    <option name=\"myDocStringFormat\" value=\"Plain\" />\n+    <option name=\"format\" value=\"GOOGLE\" />\n+    <option name=\"myDocStringFormat\" value=\"Google\" />\n   </component>\n </module>\n\\ No newline at end of file\ndiff --git a/gh/test_ghapi.py b/gh/test_ghapi.py\nnew file mode 100644\nindex 0000000..72e3912\n--- /dev/null\n+++ b/gh/test_ghapi.py\n@@ -0,0 +1,57 @@\n+import unittest\n+from ghapi import get_pr_info, github_login, github_user_login, get_pr_files, comment_on_pr, read_url_data\n+from gh.pr_info import PRInfo\n+import os\n+\n+\n+class TestGhapi(unittest.TestCase):\n+\n+    def setUp(self):\n+        # Set up the repository information and GitHub tokens needed for testing\n+        self.repo = os.getenv('GITHUB_REPO', 'brian-ding/glowing-train')  # Replace with your repo\n+        self.pr_number = int(os.getenv('GITHUB_PR_NUMBER', 3))  # Replace with actual PR number\n+        self.github_token = os.getenv('GITHUB_TOKEN',\n+                                      'your_token')  # Replace with your GitHub token\n+        self.github_user_token = os.getenv('GITHUB_TOKEN',\n+                                           'your_token')  # Replace with your GitHub user token\n+\n+    def test_get_pr_info(self):\n+        # Test fetching PR information\n+        result = get_pr_info(self.repo, self.pr_number, self.github_token)\n+        self.assertIsInstance(result, PRInfo)\n+        self.assertTrue(result.title)\n+        self.assertTrue(result.description)\n+        self.assertTrue(result.diff)\n+\n+    def test_github_login(self):\n+        # Test logging into GitHub using the GitHub token\n+        result = github_login(self.github_token, self.repo)\n+        self.assertIsNotNone(result)\n+        self.assertTrue(hasattr(result, 'get_pull'))\n+\n+    def test_github_user_login(self):\n+        # Test logging into GitHub using the GitHub user token\n+        result = github_user_login(self.github_user_token, self.repo)\n+        self.assertIsNotNone(result)\n+        self.assertTrue(hasattr(result, 'get_pull'))\n+\n+    def test_get_pr_files(self):\n+        # Test fetching files from a PR\n+        result = get_pr_files(self.repo, self.pr_number, self.github_token)\n+        self.assertIsInstance(result, list)\n+\n+    def test_comment_on_pr(self):\n+        # Test commenting on a PR\n+        comment = \"This is a test comment.\"\n+        result = comment_on_pr(self.repo, self.pr_number, self.github_token, comment)\n+        self.assertEqual(result, \"comment success.\")\n+\n+    def test_read_url_data(self):\n+        # Test reading data from a URL\n+        url = \"https://raw.githubusercontent.com/your-username/your-repo/main/README.md\"\n+        result = read_url_data(url)\n+        self.assertTrue(result)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\ndiff --git a/gh/test_pr_info.json b/gh/test_pr_info.json\nnew file mode 100644\nindex 0000000..1d48c05\n--- /dev/null\n+++ b/gh/test_pr_info.json\n@@ -0,0 +1,7 @@\n+{\n+  \"repo\": \"brian-ding/glowing-train\",\n+  \"pr_Number\": 3,\n+  \"title\": \"cicd: [Noticket] Add new workflow for ai pr review\",\n+  \"description\": \"Description: Add new workflow for ai pr review\\n\\n![image](https://github.com/user-attachments/assets/0ec6f07f-786a-431b-88e6-c0eb54c3f415)\",\n+  \"diff\": \"diff --git a/.github/workflows/ai-pr-review.yml b/.github/workflows/ai-pr-review.yml\\nnew file mode 100644\\nindex 0000000..9eae33f\\n--- /dev/null\\n+++ b/.github/workflows/ai-pr-review.yml\\n@@ -0,0 +1,49 @@\\n+name: AI PR Review\\n+\\n+on:\\n+  pull_request:\\n+    types: [opened, synchronize, reopened]\\n+  workflow_dispatch: {}\\n+permissions:\\n+  id-token: write\\n+  contents: read\\n+  pull-requests: write\\n+  issues: write\\n+env:\\n+  LLM_HOST: ${{secrets.LLM_HOST}}\\n+\\n+jobs:\\n+  ai-pr-review:\\n+    runs-on: hackthon\\n+    steps:\\n+      - name: Checkout Repository\\n+        uses: actions/checkout@v4\\n+\\n+      - name: Setup Python\\n+        uses: actions/setup-python@v5\\n+        with:\\n+          python-version: '3.10'\\n+\\n+      - name: Checkout common-scripts repository\\n+        uses: actions/checkout@v4\\n+        with:\\n+          repository: brian-ding/scaling-robot\\n+          ref: main\\n+          #ref: feature/castle/add-review-and-sammary-command\\n+          path: scaling-robot\\n+\\n+      - name: Restore pip packages\\n+        working-directory: ./scaling-robot\\n+        run: pip install -r requirements.txt\\n+\\n+      - name: PR summary\\n+        working-directory: ./scaling-robot\\n+        run: python main.py summary -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n+\\n+      - name: PR code review\\n+        working-directory: ./scaling-robot\\n+        run: python main.py review -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"\n+}\ndiff --git a/llm/_message.py b/llm/_message.py\nindex 6adbd04..29a5770 100644\n--- a/llm/_message.py\n+++ b/llm/_message.py\n@@ -1,8 +1,8 @@\n from enum import Enum\n \n class Role(Enum):\n-    USER = 1\n-    ASSISTANT = 2\n+    USER = \"user\"\n+    ASSISTANT = \"assistant\"\n \n class Message:\n     def __init__(self, role: Role, content: str):\ndiff --git a/llm/code_review_output_schema.json b/llm/code_review_output_schema.json\nnew file mode 100644\nindex 0000000..123dc53\n--- /dev/null\n+++ b/llm/code_review_output_schema.json\n@@ -0,0 +1,52 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n+  \"title\": \"PR Feedback Schema\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"summary\": {\n+      \"type\": \"string\",\n+      \"description\": \"Summary of the PR in 2-3 sentences.\"\n+    },\n+    \"type\": {\n+      \"type\": \"string\",\n+      \"enum\": [\n+        \"Feature\",\n+        \"Bug Fix\",\n+        \"Tests\",\n+        \"Refactoring\"\n+      ],\n+      \"description\": \"PR type\"\n+    },\n+    \"comments\": {\n+      \"type\": \"array\",\n+      \"items\": {\n+        \"type\": \"object\",\n+        \"properties\": {\n+          \"relevant_file\": {\n+            \"type\": \"string\",\n+            \"description\": \"The relevant file full path.\"\n+          },\n+          \"line_num\": {\n+            \"type\": \"integer\",\n+            \"minimum\": 0,\n+            \"description\": \"A single code line taken from the relevant file, to which the suggestion applies.\"\n+          },\n+          \"comment\": {\n+            \"type\": \"string\",\n+            \"description\": \"A concrete suggestion for meaningfully improving the new PR code.\"\n+          }\n+        },\n+        \"required\": [\n+          \"relevant_file\",\n+          \"line_num\",\n+          \"comment\"\n+        ]\n+      }\n+    }\n+  },\n+  \"required\": [\n+    \"summary\",\n+    \"type\",\n+    \"comments\"\n+  ]\n+}\n\\ No newline at end of file\ndiff --git a/llm/llm.py b/llm/llm.py\ndeleted file mode 100644\nindex 69d9c52..0000000\n--- a/llm/llm.py\n+++ /dev/null\n@@ -1,66 +0,0 @@\n-# This is llm/llm.py\n-import os\n-import requests\n-from typing import List\n-from gh.pr_info import PRInfo\n-from ._message import Message, Role\n-\n-def summarize_pr_info(info) -> str:\n-    \"\"\"\n-    Synnart the PR information and return a string.\n-\n-    Parameters:\n-    info (PRInfo): The PRInfo object containing PR details.\n-\n-    Returns:\n-    str: A result string after summarizing the PR info.\n-    \"\"\"\n-\n-    messages = _generate_summary_messages(info)\n-    result = _ask(messages)\n-\n-    return f\"PR summary result: {result}\"\n-\n-def _generate_summary_messages(info: PRInfo) -> List[Message]:\n-    message = Message(Role.USER, f\"Can you summarize the PR based on the following info?\\nthe title is: {info.title}\\nand the description is: {info.description}\")\n-    return [message]\n-\n-def review_pr_code(code):\n-    \"\"\"\n-    Review the PR code and return a string.\n-\n-    Parameters:\n-    code (PRCode): The PRCode object containing PR code.\n-\n-    Returns:\n-    str: A result string after reviewing the PR code.\n-    \"\"\"\n-\n-    return f\"PR review result: {code.filesCount}\"\n-\n-\n-def _ask(messages: List[Message]) -> str:\n-    \"\"\"\n-    Ask llm a question and return an answer.\n-\n-    Parameters:\n-    messages (List[Message]): The chat history including the new question.\n-\n-    Returns:\n-    str: An answer from the llm.\n-    \"\"\"\n-\n-    # Replace with the actual URL of the API\n-    llm_host = os.getenv('LLM_HOST')\n-    url = f\"{llm_host}/api/chat\"\n-\n-    payload = {\n-        \"model\": \"llama3:8b\",\n-        \"messages\": [message.to_dict() for message in messages],\n-        \"stream\": False\n-    }\n-    headers = {\"Content-Type\": \"application/json\"}\n-\n-    response = requests.request(\"POST\", url, json=payload, headers=headers)\n-\n-    return response.text\n\\ No newline at end of file\ndiff --git a/llm/llmapi.py b/llm/llmapi.py\nnew file mode 100644\nindex 0000000..bcce9f8\n--- /dev/null\n+++ b/llm/llmapi.py\n@@ -0,0 +1,91 @@\n+# This is llm/llmapi.py\n+import os\n+import requests\n+from typing import List\n+from gh.pr_info import PRInfo\n+from llm._message import Message, Role\n+import json\n+\n+\n+def summarize_pr_info(info) -> str:\n+    \"\"\"\n+    Synnart the PR information and return a string.\n+\n+    Parameters:\n+    info (PRInfo): The PRInfo object containing PR details.\n+\n+    Returns:\n+    str: A result string after summarizing the PR info.\n+    \"\"\"\n+\n+    messages = _generate_summary_messages(info)\n+    result = _ask(messages)\n+\n+    return f\"PR summary result: {result}\"\n+\n+\n+def _generate_summary_messages(info: PRInfo) -> List[Message]:\n+    message = Message(Role.USER,\n+                      f\"Can you summarize the PR based on the following info?\\nthe title is: {info.title}\\nand the description is: {info.description}\")\n+    return [message]\n+\n+\n+def _generate_code_review_messages(info: PRInfo) -> List[Message]:\n+    prompt = \"\"\"You are PR-Reviewer, a language model designed to review git pull requests.\n+        Your task is to provide constructive and concise feedback for the PR, and also provide meaningful code suggestions.\n+        The review should focus on new code added in the PR (lines starting with '+'), and not on code that already existed in the file (lines starting with '-', or without prefix).\n+         The output has to be a valid JSON object which can be parsed as is. Your response \n+    should not include any notes or explanations.\n+        You must use the following JSON schema to format your answer :\n+       \"\"\"\n+    with open('code_review_output_schema.json', 'r') as file:\n+        prompt = f\"{prompt}\\n{file}\"\n+\n+    message = Message(Role.USER, f\"\\n{prompt}\\n The PR diff content: ---\\n {info.diff} \\n---\")\n+    return [message]\n+\n+\n+def review_pr_code(info: PRInfo):\n+    \"\"\"\n+     Review the PR code and return a string.\n+\n+     Parameters:\n+     code (PRCode): The PRCode object containing PR code.\n+\n+     Returns:\n+     str: A result string after reviewing the PR code.\n+     \"\"\"\n+    messages = _generate_code_review_messages(info)\n+    result = _ask(messages)\n+    response_content = json.loads(result)['message']['content']\n+    response_json = json.loads(response_content)\n+    return response_json\n+\n+\n+def _ask(messages: List[Message]) -> str:\n+    \"\"\"\n+    Ask llm a question and return an answer.\n+\n+    Parameters:\n+    messages (List[Message]): The chat history including the new question.\n+\n+    Returns:\n+    str: An answer from the llm.\n+    \"\"\"\n+\n+    # Replace with the actual URL of the API\n+    llm_host = os.getenv('LLM_HOST', 'http://localhost:11434')\n+\n+    url = f\"{llm_host}/api/chat\"\n+\n+    payload = {\n+        # \"model\": \"llama3:8b\",\n+        \"model\": \"llama3\" if 'localhost' in llm_host else \"llama3:8b\",\n+        \"messages\": [message.to_dict() for message in messages],\n+        \"stream\": False\n+    }\n+    headers = {\"Content-Type\": \"application/json\"}\n+\n+    response = requests.request(\"POST\", url, json=payload, headers=headers)\n+\n+    return response.text\ndiff --git a/llm/test_llm.py b/llm/test_llm.py\nnew file mode 100644\nindex 0000000..4290183\n--- /dev/null\n+++ b/llm/test_llm.py\n@@ -0,0 +1,60 @@\n+import unittest\n+import json\n+from llm.llmapi import summarize_pr_info, _generate_summary_messages, review_pr_code, _ask\n+from gh.pr_info import PRInfo\n+from gh.pr_code import PRCode\n+from llm._message import Message, Role\n+import os\n+import requests\n+\n+\n+class TestLlm(unittest.TestCase):\n+\n+    def setUp(self):\n+        # Set up necessary environment variables\n+        self.llm_host = os.getenv('LLM_HOST', 'http://localhost:11434')\n+        # Load PR info from JSON file\n+        with open('test_pr_info.json', 'r') as file:\n+            pr_info_data = json.load(file)\n+            self.pr_info = PRInfo(\n+                repo=pr_info_data['repo'],\n+                prNumber=pr_info_data['prNumber'],\n+                title=pr_info_data['title'],\n+                description=pr_info_data['description'],\n+                diff=pr_info_data['diff']\n+            )\n+\n+    def test_summarize_pr_info(self):\n+        # Test summarizing PR information\n+        result = summarize_pr_info(self.pr_info)\n+        self.assertTrue(\"PR summary result:\" in result)\n+\n+    def test_generate_summary_messages(self):\n+        # Test generating summary messages\n+        result = _generate_summary_messages(self.pr_info)\n+        expected_message = Message(Role.USER,\n+                                   f\"Can you summarize the PR based on the following info?\\nthe title is: {self.pr_info.title}\\nand the description is: {self.pr_info.description}\")\n+        self.assertEqual(result, [expected_message])\n+\n+    def test_review_pr_code(self):\n+        result = review_pr_code(self.pr_info)\n+        self.assertTrue(result)\n+\n+    def test_ask(self):\n+        # Test asking the LLM a question\n+        messages = [Message(Role.USER, \"fake content\")]\n+        url = f\"{self.llm_host}/api/chat\"\n+        payload = {\n+            \"model\": \"llama3\" if 'localhost' in self.llm_host else \"llama3:8b\",\n+            # The name is llama3 for the local installation\n+            # \"model\": \"llama3:8b\",\n+            \"messages\": [message.to_dict() for message in messages],\n+            \"stream\": False\n+        }\n+        headers = {\"Content-Type\": \"application/json\"}\n+        response = requests.post(url, json=payload, headers=headers)\n+        self.assertTrue(response.text)\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\ndiff --git a/llm/test_pr_info.json b/llm/test_pr_info.json\nnew file mode 100644\nindex 0000000..98a2c17\n--- /dev/null\n+++ b/llm/test_pr_info.json\n@@ -0,0 +1,7 @@\n+{\n+  \"repo\": \"brian-ding/glowing-train\",\n+  \"prNumber\": 3,\n+  \"title\": \"cicd: [Noticket] Add new workflow for ai pr review\",\n+  \"description\": \"Description: Add new workflow for ai pr review\\n\\n![image](https://github.com/user-attachments/assets/0ec6f07f-786a-431b-88e6-c0eb54c3f415)\",\n+  \"diff\": \"diff --git a/.github/workflows/ai-pr-review.yml b/.github/workflows/ai-pr-review.yml\\nnew file mode 100644\\nindex 0000000..9eae33f\\n--- /dev/null\\n+++ b/.github/workflows/ai-pr-review.yml\\n@@ -0,0 +1,49 @@\\n+name: AI PR Review\\n+\\n+on:\\n+  pull_request:\\n+    types: [opened, synchronize, reopened]\\n+  workflow_dispatch: {}\\n+permissions:\\n+  id-token: write\\n+  contents: read\\n+  pull-requests: write\\n+  issues: write\\n+env:\\n+  LLM_HOST: ${{secrets.LLM_HOST}}\\n+\\n+jobs:\\n+  ai-pr-review:\\n+    runs-on: hackthon\\n+    steps:\\n+      - name: Checkout Repository\\n+        uses: actions/checkout@v4\\n+\\n+      - name: Setup Python\\n+        uses: actions/setup-python@v5\\n+        with:\\n+          python-version: '3.10'\\n+\\n+      - name: Checkout common-scripts repository\\n+        uses: actions/checkout@v4\\n+        with:\\n+          repository: brian-ding/scaling-robot\\n+          ref: main\\n+          #ref: feature/castle/add-review-and-sammary-command\\n+          path: scaling-robot\\n+\\n+      - name: Restore pip packages\\n+        working-directory: ./scaling-robot\\n+        run: pip install -r requirements.txt\\n+\\n+      - name: PR summary\\n+        working-directory: ./scaling-robot\\n+        run: python main.py summary -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n+\\n+      - name: PR code review\\n+        working-directory: ./scaling-robot\\n+        run: python main.py review -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"\n+}\ndiff --git a/main.py b/main.py\nindex cdd2e86..f6bdfc5 100644\n--- a/main.py\n+++ b/main.py\n@@ -1,8 +1,7 @@\n import click\n from gh.ghapi import get_pr_info\n-from gh.ghapi import get_pr_files\n from gh.ghapi import comment_on_pr\n-from llm.llm import review_pr_code, summarize_pr_info\n+from llm.llmapi import review_pr_code, summarize_pr_info\n \n \n @click.group()\n@@ -27,30 +26,7 @@ def summary(repo_name, pr_num, token):\n @click.option(\"--token\", envvar=\"GH_TOKEN\", help=\"Github token\")\n def review(repo_name, pr_num, token):\n     \"\"\"Review a PR\"\"\"\n-    # Get the PR code files\n-    # url = f\"https://api.github.com/repos/{repo}/pulls/{pr_number}/files\"\n-    pr_files = get_pr_files(repo_name, pr_num, token)\n-    for pr_file in pr_files:\n-        filename = pr_file[\"filename\"]\n-        click.echo(f\"Review file: {filename}\")\n-        patch = pr_file[\"patch\"]\n-        for chunk in split_code_into_chunks(patch):\n-            review_response = review_pr_code(chunk)\n-            comment = f\"**Review for {filename} (chunk):**\\n\\n{review_response}\"\n-            click.echo(comment)\n-            # TBD Comment on the line code\n-            # comment_on_pr(repo_name, pr_num, comment, token)\n-\n-\n-def split_code_into_chunks(code, chunk_size=500):\n-    \"\"\"\n-    Split a code string into chunks\n-    :param code: PR code patch\n-    :param chunk_size:  Chunk size\n-    \"\"\"\n-    lines = code.split(\"\\n\")\n-    for i in range(0, len(lines), chunk_size):\n-        yield \"\\n\".join(lines[i : i + chunk_size])\n+    pass\n \n \n if __name__ == \"__main__\":\ndiff --git a/test_main.py b/test_main.py\nnew file mode 100644\nindex 0000000..dd8687e\n--- /dev/null\n+++ b/test_main.py\n@@ -0,0 +1,29 @@\n+import unittest\n+\n+from main import cli\n+import os\n+from click.testing import CliRunner\n+\n+\n+class TestMain(unittest.TestCase):\n+\n+    def setUp(self):\n+        # Set up necessary environment variables\n+        self.repo = os.getenv('GITHUB_REPO', 'brian-ding/glowing-train')\n+        self.pr_number = int(os.getenv('GITHUB_PR_NUMBER', 3))\n+        self.github_token = os.getenv('GITHUB_TOKEN', 'your_token')\n+\n+    def test_summary(self):\n+        # Test summarizing a PR\n+        runner = CliRunner()\n+        summary_result = runner.invoke(cli, ['summary', '--repo-name', self.repo, '--pr-num', self.pr_number, '--token',\n+                                             self.github_token])\n+        self.assertEqual(summary_result.exit_code, 0)\n+\n+    def test_review(self):\n+        # Test reviewing a PR\n+        pass\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\ndiff --git a/test_pr_info.json b/test_pr_info.json\nnew file mode 100644\nindex 0000000..98a2c17\n--- /dev/null\n+++ b/test_pr_info.json\n@@ -0,0 +1,7 @@\n+{\n+  \"repo\": \"brian-ding/glowing-train\",\n+  \"prNumber\": 3,\n+  \"title\": \"cicd: [Noticket] Add new workflow for ai pr review\",\n+  \"description\": \"Description: Add new workflow for ai pr review\\n\\n![image](https://github.com/user-attachments/assets/0ec6f07f-786a-431b-88e6-c0eb54c3f415)\",\n+  \"diff\": \"diff --git a/.github/workflows/ai-pr-review.yml b/.github/workflows/ai-pr-review.yml\\nnew file mode 100644\\nindex 0000000..9eae33f\\n--- /dev/null\\n+++ b/.github/workflows/ai-pr-review.yml\\n@@ -0,0 +1,49 @@\\n+name: AI PR Review\\n+\\n+on:\\n+  pull_request:\\n+    types: [opened, synchronize, reopened]\\n+  workflow_dispatch: {}\\n+permissions:\\n+  id-token: write\\n+  contents: read\\n+  pull-requests: write\\n+  issues: write\\n+env:\\n+  LLM_HOST: ${{secrets.LLM_HOST}}\\n+\\n+jobs:\\n+  ai-pr-review:\\n+    runs-on: hackthon\\n+    steps:\\n+      - name: Checkout Repository\\n+        uses: actions/checkout@v4\\n+\\n+      - name: Setup Python\\n+        uses: actions/setup-python@v5\\n+        with:\\n+          python-version: '3.10'\\n+\\n+      - name: Checkout common-scripts repository\\n+        uses: actions/checkout@v4\\n+        with:\\n+          repository: brian-ding/scaling-robot\\n+          ref: main\\n+          #ref: feature/castle/add-review-and-sammary-command\\n+          path: scaling-robot\\n+\\n+      - name: Restore pip packages\\n+        working-directory: ./scaling-robot\\n+        run: pip install -r requirements.txt\\n+\\n+      - name: PR summary\\n+        working-directory: ./scaling-robot\\n+        run: python main.py summary -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n+\\n+      - name: PR code review\\n+        working-directory: ./scaling-robot\\n+        run: python main.py review -r ${{ github.event.repository.full_name }} -n ${{ github.event.pull_request.number}}\\n+        env:\\n+          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\"\n+}"
}
